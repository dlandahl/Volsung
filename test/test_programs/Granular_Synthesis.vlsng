
Random <1, 1>: {
    ; Generates a random value when pinged
    min: _1
    max: _2
    
    Noise~ -> snh: Sample_And_Hold~
    -> Bi_to_Unipolar~
    -> *max - min
    -> +min
    -> output

    input -> 1|snh
}

Random_Interval_Clock <0, 1>: {
    ; A clock that outputs each value after a random time interval
    clock: Clock~ 1ms
    -> Random~ _1, _2
    -> clock -> output
}

Grain <1, 1>: {
    ; The audio buffer that the grain will be read from
    data: _1
    start_time: random(500ms, 2000ms)

    ; Smoothing for the amplitude envelope of the grain
    input -> Envelope_Generator~ 75ms
    -> Smooth~ 7
    -> 1|envelope: Multiply~

    ; Envelope generator used for scanning through the buffer
    input -> Envelope_Generator~ length_of(data) / 1
    -> *-1 -> +1
    -> *length_of(data)
    -> Add~ start_time
    -> Index_Sequence~ data
    -> envelope
    -> output
}

Granular_Voice <0, 1>: {
    source_audio: _1
    num_grains: _2

    spawn_interval: _3

    [num_grains] Random_Interval_Clock~ spawn_interval[0], spawn_interval[1]
    => [num_grains] Grain~ source_audio
    >> output
}

&length 10s

data: read_file("files/drumbeat")
num_grains: 15
respawn_interval_bounds: { 150ms, 500ms }

voice: [2] Granular_Voice~ data, num_grains, respawn_interval_bounds

voice[0] -> 0|output
voice[1] -> 1|output
